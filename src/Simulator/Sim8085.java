package Simulator;

import java.awt.Rectangle;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".asm");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Assembly Files (*.asm)";
        }
    } 



/**
 *
 * @author Ranjan
 */
public class Sim8085 extends javax.swing.JFrame {
    private Ram mem=new Ram();
    private Assembler asm=new Assembler();
    private Decoder decoder=new Decoder();
    
    private String str=new String();
    private Register reg=new Register();
    private Ports ports=decoder.getPorts();

    /**
     * Creates new form NewJFrame
     */
    public Sim8085() {
        Toolkit tk=Toolkit.getDefaultToolkit();
        initComponents();
        this.setIconImage(tk.createImage(getClass().getResource("resources/icon.png")));

    }
    public void resetAll(){
        mem.reset();
        reg.reset();
        ports.reset();
    }
    
    
    
    
    public void updateMemory(){
                    int i;
        String[][] m=mem.getMemoryArray();
        String [][]arr=new String[65536][3];
        for(i=0;i<65536;i++){
            arr[i][0]=Integer.toHexString(i).toUpperCase();
            while(arr[i][0].length()<4)
                arr[i][0]='0'+arr[i][0];
            arr[i][1]=m[i][1];
            if(arr[i][1].equalsIgnoreCase("NIL"))
                    arr[i][2]="NIL";
            else{
                arr[i][2]=Integer.toHexString(Integer.parseInt(arr[i][1], 2)).toUpperCase();
                while(arr[i][2].length()<2)
                    arr[i][2]='0'+arr[i][2];
            }
        }
        memView.setModel(new javax.swing.table.DefaultTableModel(
            arr,
            new String [] {
                "ADDRESS(HEX)", "CONTENTS", "HEX VALUE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        }
        public void updateports(){
            String[] p=ports.getPortsArray();
        String[][] rows=new String[256][2];
        for(int k=0;k<256;k++){
            rows[k][0]=Integer.toHexString(k).toUpperCase();
            while(rows[k][0].length()<2)
            rows[k][0]='0'+rows[k][0];
            rows[k][1]=p[k];
        }
        portsView.setModel(new javax.swing.table.DefaultTableModel(
            rows,
            new String [] {
                "ADDRESS(HEX)", "VALUE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void showReg(){
        reg=decoder.getRegisterSet();
        A.setText(reg.getA().toUpperCase());
        B.setText(reg.getB().toUpperCase());
        C.setText(reg.getC().toUpperCase());
        D.setText(reg.getD().toUpperCase());
        E.setText(reg.getE().toUpperCase());
        H.setText(reg.getH().toUpperCase());
        L.setText(reg.getL().toUpperCase());
        
        S.setText(Integer.toString(reg.getSign()));
        Z.setText(Integer.toString(reg.getZero()));
        AC.setText(Integer.toString(reg.getAuxCarry()));
        P.setText(Integer.toString(reg.getParity()));
        CY.setText(Integer.toString(reg.getCarry()));
        SP.setText(reg.getSP().toUpperCase());
        PC.setText(reg.getPC().toUpperCase());
    }
    public void doOpen(){
        FileChooser.setDialogTitle("Open");
         int returnVal = FileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = FileChooser.getSelectedFile();
        try {
          // What to do with the file, e.g. display it in a TextArea
          pgm_editor.read( new FileReader( file.getAbsolutePath() ), null );
        } catch (IOException ex) {
          System.out.println("problem accessing file"+file.getAbsolutePath());
        }
    } else {
        System.out.println("File access cancelled by user.");
    }
    }
    public void doSave(){
     try
        {
           FileChooser.setDialogTitle("Save");
            FileChooser.setCurrentDirectory( new File( "./") );
            if( FileChooser.showSaveDialog( this ) == JFileChooser.APPROVE_OPTION ){
                File fileName = new File( FileChooser.getSelectedFile( ) + ".asm" );
                BufferedWriter outFile = new BufferedWriter( new FileWriter( fileName ) );
                outFile.write( pgm_editor.getText( ) ); 
                outFile.flush();
                outFile.close();
          }
        }
     catch(IOException ex){
         
     }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser = new javax.swing.JFileChooser();
        resultScrollPane = new javax.swing.JScrollPane();
        resultview = new javax.swing.JTextPane();
        outTabbedPane = new javax.swing.JTabbedPane();
        dataScrollPane = new javax.swing.JScrollPane();
        dataPane = new javax.swing.JTextPane();
        stackScrollPane = new javax.swing.JScrollPane();
        stackView = new javax.swing.JTable();
        memeoryLayeredPane = new javax.swing.JLayeredPane();
        memoryScrollPane = new javax.swing.JScrollPane();
        memView = new javax.swing.JTable();
        searchLabel = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        portsScrollPane = new javax.swing.JScrollPane();
        portsView = new javax.swing.JTable();
        regLayeredPane = new javax.swing.JLayeredPane();
        aRegLbl = new javax.swing.JLabel();
        bcRegLbl = new javax.swing.JLabel();
        regLbl = new javax.swing.JLabel();
        deRegLbl = new javax.swing.JLabel();
        hlRegLbl = new javax.swing.JLabel();
        pcRegLbl = new javax.swing.JLabel();
        spRegLbl = new javax.swing.JLabel();
        B = new javax.swing.JTextField();
        C = new javax.swing.JTextField();
        D = new javax.swing.JTextField();
        E = new javax.swing.JTextField();
        H = new javax.swing.JTextField();
        L = new javax.swing.JTextField();
        PC = new javax.swing.JTextField();
        SP = new javax.swing.JTextField();
        A = new javax.swing.JTextField();
        converterLayeredPane = new javax.swing.JLayeredPane();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        toBinary = new javax.swing.JButton();
        toHex = new javax.swing.JButton();
        dec = new javax.swing.JTextField();
        hexa = new javax.swing.JTextField();
        flagsLayeredPane = new javax.swing.JLayeredPane();
        flagLbl = new javax.swing.JLabel();
        acFlagLbl = new javax.swing.JLabel();
        cFlagLbl = new javax.swing.JLabel();
        pFlagLbl = new javax.swing.JLabel();
        zFlagLbl = new javax.swing.JLabel();
        sFlagLbl = new javax.swing.JLabel();
        jTextField19 = new javax.swing.JTextField();
        Z = new javax.swing.JTextField();
        AC = new javax.swing.JTextField();
        P = new javax.swing.JTextField();
        CY = new javax.swing.JTextField();
        S = new javax.swing.JTextField();
        fileToolBar = new javax.swing.JToolBar();
        newFileButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        editToolBar = new javax.swing.JToolBar();
        cutBtn = new javax.swing.JButton();
        copyToClipBtn = new javax.swing.JButton();
        pasteFromClipBtn = new javax.swing.JButton();
        execToolBar = new javax.swing.JToolBar();
        assembleBtn = new javax.swing.JButton();
        pgmEditorScrollPane = new javax.swing.JScrollPane();
        pgm_editor = new javax.swing.JTextPane();
        toolSeparator = new javax.swing.JSeparator();
        messageLbl = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        exitWindow = new javax.swing.JMenuItem();
        resetMenu = new javax.swing.JMenu();
        resetall = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        simuHelp = new javax.swing.JMenuItem();

        FileChooser.setDialogTitle("");
        FileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("8085 simulator");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setExtendedState(6);
        setMinimumSize(new java.awt.Dimension(1050, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultview.setEditable(false);
        resultScrollPane.setViewportView(resultview);

        getContentPane().add(resultScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 560, 420, 110));

        outTabbedPane.setBackground(new java.awt.Color(255, 153, 153));
        outTabbedPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        outTabbedPane.setForeground(new java.awt.Color(51, 51, 255));
        outTabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        outTabbedPane.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        dataPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dataScrollPane.setViewportView(dataPane);

        outTabbedPane.addTab("Data", dataScrollPane);

        stackView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Stack Loc", "Value"
            }
        ));
        stackScrollPane.setViewportView(stackView);

        outTabbedPane.addTab("Stack", stackScrollPane);

        int i;
        String[][] m=mem.getMemoryArray();
        String [][]arr=new String[65536][3];
        for(i=0;i<65536;i++){
            arr[i][0]=Integer.toHexString(i).toUpperCase();
            while(arr[i][0].length()<4)
            arr[i][0]='0'+arr[i][0];
            arr[i][1]=m[i][1];
            arr[i][2]="NIL";
        }
        memView.setModel(new javax.swing.table.DefaultTableModel(
            arr,
            new String [] {
                "ADDRESS(HEX)", "CONTENTS", "HEX VALUE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        memView.setColumnSelectionAllowed(true);
        memoryScrollPane.setViewportView(memView);
        memView.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        memoryScrollPane.setBounds(0, 70, 403, 310);
        memeoryLayeredPane.add(memoryScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        searchLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchLabel.setForeground(new java.awt.Color(51, 102, 255));
        searchLabel.setText("Memory Location");
        searchLabel.setBounds(10, 20, 110, 30);
        memeoryLayeredPane.add(searchLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        searchText.setToolTipText("Location to Search, \nfor hexadecimal append 'h'");
        searchText.setBounds(150, 20, 160, 30);
        memeoryLayeredPane.add(searchText, javax.swing.JLayeredPane.DEFAULT_LAYER);

        searchBtn.setText("OK");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        searchBtn.setBounds(338, 20, 47, 30);
        memeoryLayeredPane.add(searchBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);

        outTabbedPane.addTab("Memory", memeoryLayeredPane);

        String[] p=ports.getPortsArray();
        String[][] rows=new String[256][2];
        for(int k=0;k<256;k++){
            rows[k][0]=Integer.toHexString(k).toUpperCase();
            while(rows[k][0].length()<2)
            rows[k][0]='0'+rows[k][0];
            rows[k][1]=p[k];
        }
        portsView.setModel(new javax.swing.table.DefaultTableModel(
            rows,
            new String [] {
                "ADDRESS(HEX)", "VALUE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        portsScrollPane.setViewportView(portsView);

        outTabbedPane.addTab("I/O Ports", portsScrollPane);

        outTabbedPane.setSelectedIndex(2);

        getContentPane().add(outTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 110, 420, 420));

        regLayeredPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        aRegLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        aRegLbl.setForeground(new java.awt.Color(51, 51, 255));
        aRegLbl.setText("A");
        aRegLbl.setBounds(90, 30, 30, 50);
        regLayeredPane.add(aRegLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        bcRegLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bcRegLbl.setForeground(new java.awt.Color(51, 51, 255));
        bcRegLbl.setText("BC");
        bcRegLbl.setBounds(30, 80, 40, 30);
        regLayeredPane.add(bcRegLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        regLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        regLbl.setForeground(new java.awt.Color(0, 0, 204));
        regLbl.setText("Registers");
        regLbl.setBounds(80, 0, 90, 30);
        regLayeredPane.add(regLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        deRegLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deRegLbl.setForeground(new java.awt.Color(51, 51, 255));
        deRegLbl.setText("DE");
        deRegLbl.setBounds(30, 140, 50, 30);
        regLayeredPane.add(deRegLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        hlRegLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        hlRegLbl.setForeground(new java.awt.Color(51, 51, 255));
        hlRegLbl.setText("HL");
        hlRegLbl.setBounds(30, 190, 40, 30);
        regLayeredPane.add(hlRegLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        pcRegLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        pcRegLbl.setForeground(new java.awt.Color(51, 51, 255));
        pcRegLbl.setText("PC");
        pcRegLbl.setBounds(30, 250, 40, 30);
        regLayeredPane.add(pcRegLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        spRegLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        spRegLbl.setForeground(new java.awt.Color(51, 51, 255));
        spRegLbl.setText("SP");
        spRegLbl.setBounds(30, 290, 40, 50);
        regLayeredPane.add(spRegLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        B.setEditable(false);
        B.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        B.setText("00");
        B.setBorder(null);
        B.setBounds(80, 80, 40, 30);
        regLayeredPane.add(B, javax.swing.JLayeredPane.DEFAULT_LAYER);

        C.setEditable(false);
        C.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        C.setText("00");
        C.setBorder(null);
        C.setBounds(160, 80, 40, 30);
        regLayeredPane.add(C, javax.swing.JLayeredPane.DEFAULT_LAYER);

        D.setEditable(false);
        D.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        D.setText("00");
        D.setBorder(null);
        D.setBounds(80, 140, 40, 30);
        regLayeredPane.add(D, javax.swing.JLayeredPane.DEFAULT_LAYER);

        E.setEditable(false);
        E.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        E.setText("00");
        E.setBorder(null);
        E.setBounds(160, 140, 40, 30);
        regLayeredPane.add(E, javax.swing.JLayeredPane.DEFAULT_LAYER);

        H.setEditable(false);
        H.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        H.setText("00");
        H.setBorder(null);
        H.setBounds(80, 190, 40, 30);
        regLayeredPane.add(H, javax.swing.JLayeredPane.DEFAULT_LAYER);

        L.setEditable(false);
        L.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        L.setText("00");
        L.setBorder(null);
        L.setBounds(160, 190, 40, 30);
        regLayeredPane.add(L, javax.swing.JLayeredPane.DEFAULT_LAYER);

        PC.setEditable(false);
        PC.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PC.setText("0000");
        PC.setBorder(null);
        PC.setBounds(110, 250, 40, 30);
        regLayeredPane.add(PC, javax.swing.JLayeredPane.DEFAULT_LAYER);

        SP.setEditable(false);
        SP.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SP.setText("FFFF");
        SP.setBorder(null);
        SP.setBounds(110, 300, 40, 30);
        regLayeredPane.add(SP, javax.swing.JLayeredPane.DEFAULT_LAYER);

        A.setEditable(false);
        A.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        A.setText("00");
        A.setBorder(null);
        A.setBounds(120, 40, 40, 30);
        regLayeredPane.add(A, javax.swing.JLayeredPane.DEFAULT_LAYER);

        getContentPane().add(regLayeredPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 230, 360));

        converterLayeredPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 204));
        jLabel9.setText("Decimal-Hex Conversion");
        jLabel9.setBounds(90, 10, 250, 30);
        converterLayeredPane.add(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 255));
        jLabel10.setText("Hex");
        jLabel10.setBounds(290, 50, 40, 22);
        converterLayeredPane.add(jLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 255));
        jLabel11.setText("Decimal");
        jLabel11.setBounds(50, 50, 73, 20);
        converterLayeredPane.add(jLabel11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        toBinary.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        toBinary.setForeground(new java.awt.Color(0, 153, 255));
        toBinary.setText("<- To Decimal");
        toBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toBinaryActionPerformed(evt);
            }
        });
        toBinary.setBounds(240, 140, 140, 40);
        converterLayeredPane.add(toBinary, javax.swing.JLayeredPane.DEFAULT_LAYER);

        toHex.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        toHex.setForeground(new java.awt.Color(0, 153, 255));
        toHex.setText("To Hex - >");
        toHex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toHexActionPerformed(evt);
            }
        });
        toHex.setBounds(20, 140, 140, 40);
        converterLayeredPane.add(toHex, javax.swing.JLayeredPane.DEFAULT_LAYER);

        dec.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        dec.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dec.setText("0");
        dec.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255)));
        dec.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selected_(evt);
            }
        });
        dec.setBounds(50, 80, 90, 50);
        converterLayeredPane.add(dec, javax.swing.JLayeredPane.DEFAULT_LAYER);

        hexa.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hexa.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hexa.setText("0");
        hexa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255)));
        hexa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selected(evt);
            }
        });
        hexa.setBounds(270, 80, 90, 50);
        converterLayeredPane.add(hexa, javax.swing.JLayeredPane.DEFAULT_LAYER);

        getContentPane().add(converterLayeredPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 480, 390, 190));

        flagsLayeredPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        flagLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        flagLbl.setForeground(new java.awt.Color(0, 0, 204));
        flagLbl.setText("Flags");
        flagLbl.setBounds(50, 10, 60, 20);
        flagsLayeredPane.add(flagLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        acFlagLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        acFlagLbl.setForeground(new java.awt.Color(51, 51, 255));
        acFlagLbl.setText("AC");
        acFlagLbl.setBounds(20, 160, 30, 50);
        flagsLayeredPane.add(acFlagLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        cFlagLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cFlagLbl.setForeground(new java.awt.Color(51, 51, 255));
        cFlagLbl.setText("C");
        cFlagLbl.setBounds(20, 280, 20, 50);
        flagsLayeredPane.add(cFlagLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        pFlagLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        pFlagLbl.setForeground(new java.awt.Color(51, 51, 255));
        pFlagLbl.setText("P");
        pFlagLbl.setBounds(20, 210, 40, 70);
        flagsLayeredPane.add(pFlagLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        zFlagLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        zFlagLbl.setForeground(new java.awt.Color(51, 51, 255));
        zFlagLbl.setText("Z");
        zFlagLbl.setBounds(20, 100, 30, 50);
        flagsLayeredPane.add(zFlagLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        sFlagLbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        sFlagLbl.setForeground(new java.awt.Color(51, 51, 255));
        sFlagLbl.setText("S");
        sFlagLbl.setBounds(20, 50, 20, 30);
        flagsLayeredPane.add(sFlagLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jTextField19.setBounds(160, 80, 40, 30);
        flagsLayeredPane.add(jTextField19, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Z.setEditable(false);
        Z.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Z.setText("0");
        Z.setBorder(null);
        Z.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZActionPerformed(evt);
            }
        });
        Z.setBounds(80, 110, 40, 30);
        flagsLayeredPane.add(Z, javax.swing.JLayeredPane.DEFAULT_LAYER);

        AC.setEditable(false);
        AC.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        AC.setText("0");
        AC.setBorder(null);
        AC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ACActionPerformed(evt);
            }
        });
        AC.setBounds(80, 170, 40, 30);
        flagsLayeredPane.add(AC, javax.swing.JLayeredPane.DEFAULT_LAYER);

        P.setEditable(false);
        P.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        P.setText("0");
        P.setBorder(null);
        P.setBounds(80, 230, 40, 30);
        flagsLayeredPane.add(P, javax.swing.JLayeredPane.DEFAULT_LAYER);

        CY.setEditable(false);
        CY.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CY.setText("0");
        CY.setBorder(null);
        CY.setBounds(80, 290, 40, 30);
        flagsLayeredPane.add(CY, javax.swing.JLayeredPane.DEFAULT_LAYER);

        S.setEditable(false);
        S.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        S.setText("0");
        S.setBorder(null);
        S.setBounds(80, 50, 40, 30);
        flagsLayeredPane.add(S, javax.swing.JLayeredPane.DEFAULT_LAYER);

        getContentPane().add(flagsLayeredPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 110, 140, 360));

        fileToolBar.setBorder(null);
        fileToolBar.setRollover(true);

        newFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Simulator/resources/New File.png"))); // NOI18N
        newFileButton.setToolTipText("New");
        newFileButton.setFocusable(false);
        newFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileButtonActionPerformed(evt);
            }
        });
        fileToolBar.add(newFileButton);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Simulator/resources/folder-open-21.png"))); // NOI18N
        openButton.setToolTipText("Open");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        fileToolBar.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Simulator/resources/Actions-document-save-icon.png"))); // NOI18N
        saveButton.setToolTipText("Save");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        fileToolBar.add(saveButton);

        getContentPane().add(fileToolBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 80));

        editToolBar.setRollover(true);

        cutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Simulator/resources/cut.png"))); // NOI18N
        cutBtn.setToolTipText("Cut");
        cutBtn.setFocusable(false);
        cutBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cutBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(cutBtn);

        copyToClipBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Simulator/resources/copy.png"))); // NOI18N
        copyToClipBtn.setToolTipText("Copy");
        copyToClipBtn.setFocusable(false);
        copyToClipBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyToClipBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(copyToClipBtn);

        pasteFromClipBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Simulator/resources/paste.png"))); // NOI18N
        pasteFromClipBtn.setToolTipText("Paste");
        pasteFromClipBtn.setFocusable(false);
        pasteFromClipBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pasteFromClipBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editToolBar.add(pasteFromClipBtn);

        getContentPane().add(editToolBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 0, 210, 80));

        execToolBar.setRollover(true);

        assembleBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Simulator/resources/Play-icon.png"))); // NOI18N
        assembleBtn.setToolTipText("Assemble");
        assembleBtn.setFocusable(false);
        assembleBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        assembleBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        assembleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assembleBtnActionPerformed(evt);
            }
        });
        execToolBar.add(assembleBtn);

        getContentPane().add(execToolBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 100, 80));

        pgm_editor.setBorder(null);
        pgm_editor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pgmEditorScrollPane.setViewportView(pgm_editor);

        getContentPane().add(pgmEditorScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 460, 560));
        getContentPane().add(toolSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 1370, 10));

        messageLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        messageLbl.setForeground(new java.awt.Color(51, 51, 255));
        messageLbl.setText("Message:");
        getContentPane().add(messageLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 540, -1, -1));

        fileMenu.setText("File");

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFile.setText("New");
        fileMenu.add(newFile);

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        fileMenu.add(Open);

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        fileMenu.add(Save);

        exitWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitWindow.setText("Exit");
        fileMenu.add(exitWindow);

        menuBar.add(fileMenu);

        resetMenu.setText("Reset");

        resetall.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        resetall.setText(" Reset All");
        resetall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetallActionPerformed(evt);
            }
        });
        resetMenu.add(resetall);

        menuBar.add(resetMenu);

        helpMenu.setText("Help");

        simuHelp.setText("Simulator  8085");
        simuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simuHelpActionPerformed(evt);
            }
        });
        helpMenu.add(simuHelp);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
       doOpen();
    }//GEN-LAST:event_OpenActionPerformed

    private void toBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toBinaryActionPerformed
        int hexadecimal=Integer.parseInt(hexa.getText(),16);
        dec.setText(Integer.toString(hexadecimal));
    }//GEN-LAST:event_toBinaryActionPerformed

    private void toHexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toHexActionPerformed
        int decimal=Integer.parseInt(dec.getText());
        String hexadecimal=Integer.toHexString(decimal);
        hexa.setText(hexadecimal.toUpperCase());
    }//GEN-LAST:event_toHexActionPerformed

    private void assembleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assembleBtnActionPerformed
        int lc=2000;
        asm.setLc(lc);
        decoder.setPc(lc);
        this.resetAll();
        String pgm = pgm_editor.getText();
        String result=new String();
        
        if(!pgm.isEmpty()){
            asm.resolveLabel(pgm);
            mem=asm.loadMemory(pgm);
       
        
            decoder.decode(mem);
            str=mem.showMem(2000).toString();
            this.updateMemory();
            this.updateports();
            if(decoder.getError().isEmpty())
               result="No Error Found!\nProgram assembled Successfully!!";
            else
                result=decoder.getError();
            resultview.setText(result);
            showReg();
            
        }
        else
        {
            resultview.setText("No Assembly Program Found To Run.");
        }
    }//GEN-LAST:event_assembleBtnActionPerformed

    private void ZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ZActionPerformed

    private void ACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ACActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ACActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        doOpen();
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        doSave();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        doSave();
    }//GEN-LAST:event_SaveActionPerformed

    private void selected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selected
        hexa.setSelectionStart(0);
        hexa.setSelectionEnd(hexa.getText().length());
    }//GEN-LAST:event_selected

    private void selected_(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selected_
       dec.setSelectionStart(0);
       dec.setSelectionEnd(dec.getText().length());
    }//GEN-LAST:event_selected_

    private void simuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simuHelpActionPerformed
            Frame_Instuction simuHelpFrame=new Frame_Instuction();
            simuHelpFrame.setTitle("Help");
            simuHelpFrame.setAlwaysOnTop(true);
            simuHelpFrame.setVisible(true);
            simuHelpFrame.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_simuHelpActionPerformed

    private void resetallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetallActionPerformed
        resetAll();
        updateMemory();
        updateports();
        showReg();
    }//GEN-LAST:event_resetallActionPerformed

    private void newFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileButtonActionPerformed
        pgm_editor.setText("");
    }//GEN-LAST:event_newFileButtonActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
    String loc=asm.convert(searchText.getText());
    int location;
    location=Integer.parseInt(loc, 2);
    memView.getSelectionModel().setSelectionInterval(location, location);
    memView.scrollRectToVisible(new Rectangle(memView.getCellRect(location+10, 0, true)));
    }//GEN-LAST:event_searchBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sim8085.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sim8085.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sim8085.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sim8085.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Sim8085().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField A;
    private javax.swing.JTextField AC;
    private javax.swing.JTextField B;
    private javax.swing.JTextField C;
    private javax.swing.JTextField CY;
    private javax.swing.JTextField D;
    private javax.swing.JTextField E;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JTextField H;
    private javax.swing.JTextField L;
    private javax.swing.JMenuItem Open;
    private javax.swing.JTextField P;
    private javax.swing.JTextField PC;
    private javax.swing.JTextField S;
    private javax.swing.JTextField SP;
    private javax.swing.JMenuItem Save;
    private javax.swing.JTextField Z;
    private javax.swing.JLabel aRegLbl;
    private javax.swing.JLabel acFlagLbl;
    private javax.swing.JButton assembleBtn;
    private javax.swing.JLabel bcRegLbl;
    private javax.swing.JLabel cFlagLbl;
    private javax.swing.JLayeredPane converterLayeredPane;
    private javax.swing.JButton copyToClipBtn;
    private javax.swing.JButton cutBtn;
    private javax.swing.JTextPane dataPane;
    private javax.swing.JScrollPane dataScrollPane;
    private javax.swing.JLabel deRegLbl;
    private javax.swing.JTextField dec;
    private javax.swing.JToolBar editToolBar;
    private javax.swing.JToolBar execToolBar;
    private javax.swing.JMenuItem exitWindow;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JToolBar fileToolBar;
    private javax.swing.JLabel flagLbl;
    private javax.swing.JLayeredPane flagsLayeredPane;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextField hexa;
    private javax.swing.JLabel hlRegLbl;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTable memView;
    private javax.swing.JLayeredPane memeoryLayeredPane;
    private javax.swing.JScrollPane memoryScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel messageLbl;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JButton newFileButton;
    private javax.swing.JButton openButton;
    private javax.swing.JTabbedPane outTabbedPane;
    private javax.swing.JLabel pFlagLbl;
    private javax.swing.JButton pasteFromClipBtn;
    private javax.swing.JLabel pcRegLbl;
    private javax.swing.JScrollPane pgmEditorScrollPane;
    private javax.swing.JTextPane pgm_editor;
    private javax.swing.JScrollPane portsScrollPane;
    private javax.swing.JTable portsView;
    private javax.swing.JLayeredPane regLayeredPane;
    private javax.swing.JLabel regLbl;
    private javax.swing.JMenu resetMenu;
    private javax.swing.JMenuItem resetall;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTextPane resultview;
    private javax.swing.JLabel sFlagLbl;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchText;
    private javax.swing.JMenuItem simuHelp;
    private javax.swing.JLabel spRegLbl;
    private javax.swing.JScrollPane stackScrollPane;
    private javax.swing.JTable stackView;
    private javax.swing.JButton toBinary;
    private javax.swing.JButton toHex;
    private javax.swing.JSeparator toolSeparator;
    private javax.swing.JLabel zFlagLbl;
    // End of variables declaration//GEN-END:variables
}
